<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.web.rest

import <%= packageName %>.<%= mainClass %>
<%_ if (cacheProvider === 'redis') { _%>
import <%= packageName %>.RedisTestContainerExtension
<%_ } _%>
<%_ if (reactive) { _%>
import <%= packageName %>.config.ReactivePageableHandlerMethodArgumentResolver
<%_ } _%>
<%_ if (authenticationType === 'oauth2') { _%>
import <%= packageName %>.config.TestSecurityConfiguration
<%_ } _%>
import io.github.jhipster.config.JHipsterProperties
import <%= packageName %>.config.audit.AuditEventConverter
import <%= packageName %>.domain.PersistentAuditEvent
import <%= packageName %>.repository.PersistenceAuditEventRepository

import <%= packageName %>.service.AuditEventService
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
<%_ if (cacheProvider === 'redis') { _%>
import org.junit.jupiter.api.extension.ExtendWith
<%_ } _%>
import org.mockito.MockitoAnnotations
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.beans.factory.annotation.Qualifier
import org.springframework.boot.test.context.SpringBootTest
<%_ if (!reactive) { _%>
import org.springframework.data.web.PageableHandlerMethodArgumentResolver
<%_ } _%>
<%_ if (reactive) { _%>
import org.springframework.format.datetime.standard.DateTimeFormatterRegistrar
<%_ } _%>
import org.springframework.format.support.FormattingConversionService
import org.springframework.http.MediaType
<%_ if (!reactive) { _%>
import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter
import org.springframework.test.context.junit4.SpringRunner
import org.springframework.test.web.servlet.MockMvc
import org.springframework.test.web.servlet.setup.MockMvcBuilders
<%_ } _%>
<%_ if (reactive) { _%>
import org.springframework.test.web.reactive.server.WebTestClient
<%_ } _%>
<%_ if (databaseType === 'sql') { _%>
import org.springframework.transaction.annotation.Transactional
<%_ } _%>

import java.time.Instant

import org.assertj.core.api.AssertionsForClassTypes.assertThat
import org.hamcrest.Matchers.hasItem
<%_ if (!reactive) { _%>
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get
import org.springframework.test.web.servlet.result.MockMvcResultMatchers.content
import org.springframework.test.web.servlet.result.MockMvcResultMatchers.header
import org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath
import org.springframework.test.web.servlet.result.MockMvcResultMatchers.status
<%_ } _%>

private const val SAMPLE_PRINCIPAL = "SAMPLE_PRINCIPAL"
private const val SAMPLE_TYPE = "SAMPLE_TYPE"
private val SAMPLE_TIMESTAMP = Instant.parse("2015-08-04T10:11:30Z")
private const val SECONDS_PER_DAY = (60 * 60 * 24).toLong()

/**
 * Integration tests for the [AuditResource] REST controller.
 */
<%_ if (authenticationType === 'oauth2') { _%>
@SpringBootTest(classes = [<%= mainClass %>::class, TestSecurityConfiguration::class])
<%_ } else { _%>
@SpringBootTest(classes = [<%= mainClass %>::class])
<%_ } _%>
<%_ if (databaseType === 'sql') { _%>
@Transactional
<%_ } _%>
<%_ if (cacheProvider === 'redis') { _%>
@ExtendWith(RedisTestContainerExtension::class)
<%_ } _%>
class AuditResourceIT {

    @Autowired
    private lateinit var auditEventRepository: PersistenceAuditEventRepository

    @Autowired
    private lateinit var auditEventConverter: AuditEventConverter
    <%_ if (!reactive) { _%>

    @Autowired
    private lateinit var jacksonMessageConverter: MappingJackson2HttpMessageConverter

    @Autowired
    private lateinit var pageableArgumentResolver: PageableHandlerMethodArgumentResolver
    <%_ } _%>

    @Autowired
    private lateinit var jhipsterProperties: JHipsterProperties

    @Autowired
    @Qualifier("<% if (!reactive) { %>mvc<% } else { %>webFlux<% } %>ConversionService")
    private lateinit var formattingConversionService: FormattingConversionService

    @Autowired
    private lateinit var pageableArgumentResolver: PageableHandlerMethodArgumentResolver

    private lateinit var auditEvent: PersistentAuditEvent

    <%_ if (!reactive) { _%>
    private lateinit var restAuditMockMvc: MockMvc 
    <%_ } else { _%>
    private lateinit var webTestClient: WebTestClient 
    <%_ } _%>

    @BeforeEach
    fun setup() {
        MockitoAnnotations.initMocks(this)
        val auditEventService = AuditEventService(auditEventRepository, auditEventConverter, jhipsterProperties)
        val auditResource = AuditResource(auditEventService)
        <%_ if (!reactive) { _%>
        this.restAuditMockMvc = MockMvcBuilders.standaloneSetup(auditResource)
            .setCustomArgumentResolvers(pageableArgumentResolver)
            .setConversionService(formattingConversionService)
            .setMessageConverters(jacksonMessageConverter)
        <%_ } else { _%>
        this.webTestClient = WebTestClient.bindToController(auditResource)
            .argumentResolvers(configurer -> configurer.addCustomResolver(ReactivePageableHandlerMethodArgumentResolver()))
            .formatters(registry -> {
                DateTimeFormatterRegistrar registrar = DateTimeFormatterRegistrar();
                registrar.setUseIsoFormat(true);
                registrar.registerFormatters(registry);
            })
        <%_ } _%>
            .build()
    }

    @BeforeEach
    fun initTest() {
        <%_ if (databaseType === 'couchbase') { _%>
        mockAuthentication()
        <%_ } _%>
        auditEventRepository.deleteAll()<% if (reactive) { %>.block()<% } %>
        auditEvent = PersistentAuditEvent(
            auditEventType = SAMPLE_TYPE,
            principal = SAMPLE_PRINCIPAL,
            auditEventDate = SAMPLE_TIMESTAMP
        )
    }

    @Test
    <% if (!reactive) { %>@Throws(Exception::class)<% } %>
    fun getAllAudits() {
        // Initialize the database
        auditEventRepository.save(auditEvent)<% if (reactive) { %>.block()<% } %>

        // Get all the audits
        <%_ if (!reactive) { _%>
        restAuditMockMvc.perform(get("/management/audits"))
            .andExpect(status().isOk)
            .andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))
            .andExpect(jsonPath("\$.[*].principal").value(hasItem(SAMPLE_PRINCIPAL)))
        <%_ } else { _%>
        webTestClient.get().uri("/management/audits")
            .exchange()
            .expectStatus().isOk()
            .expectHeader().contentType(MediaType.APPLICATION_JSON)
            .expectBody().jsonPath("$.[*].principal").value(hasItem(SAMPLE_PRINCIPAL))
        <%_ } _%>
    }

    @Test
    <% if (!reactive) { %>@Throws(Exception::class)<% } %>
    fun getAudit() {
        // Initialize the database
        auditEventRepository.save(auditEvent)<% if (reactive) { %>.block()<% } %>

        // Get the audit
        <%_ if (!reactive) { _%>
        restAuditMockMvc.perform(get("/management/audits/{id}", auditEvent.id))
            .andExpect(status().isOk)
            .andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))
            .andExpect(jsonPath("\$.principal").value(SAMPLE_PRINCIPAL))
        <%_ } else { _%>
        webTestClient.get().uri("/management/audits/{id}", auditEvent.getId())
            .exchange()
            .expectStatus().isOk()
            .expectHeader().contentType(MediaType.APPLICATION_JSON)
            .expectBody().jsonPath("$.principal").isEqualTo(SAMPLE_PRINCIPAL)
        <%_ } _%>
    }

    @Test
    <% if (!reactive) { %>@Throws(Exception::class)<% } %>
    fun getAuditsByDate() {
        // Initialize the database
        auditEventRepository.save(auditEvent)<% if (reactive) { %>.block()<% } %>

        // Generate dates for selecting audits by date, making sure the period will contain the audit
        val fromDate = SAMPLE_TIMESTAMP.minusSeconds(SECONDS_PER_DAY).toString().substring(0, 10)
        val toDate = SAMPLE_TIMESTAMP.plusSeconds(SECONDS_PER_DAY).toString().substring(0, 10)

        // Get the audit
        <%_ if (!reactive) { _%>
        restAuditMockMvc.perform(get("/management/audits?fromDate=$fromDate&toDate=$toDate"))
            .andExpect(status().isOk)
            .andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))
            .andExpect(jsonPath("\$.[*].principal").value(hasItem(SAMPLE_PRINCIPAL)))
        <%_ } else { _%>
        webTestClient.get().uri("/management/audits?fromDate="+fromDate+"&toDate="+toDate)
            .exchange()
            .expectStatus().isOk()
            .expectHeader().contentType(MediaType.APPLICATION_JSON)
            .expectBody().jsonPath("$.[*].principal").value(hasItem(SAMPLE_PRINCIPAL))
        <%_ } _%>
    }

    @Test
    <% if (!reactive) { %>@Throws(Exception::class)<% } %>
    fun getNonExistingAuditsByDate() {
        // Initialize the database
        auditEventRepository.save(auditEvent)<% if (reactive) { %>.block()<% } %>

        // Generate dates for selecting audits by date, making sure the period will not contain the sample audit
        val fromDate = SAMPLE_TIMESTAMP.minusSeconds(2 * SECONDS_PER_DAY).toString().substring(0, 10)
        val toDate = SAMPLE_TIMESTAMP.minusSeconds(SECONDS_PER_DAY).toString().substring(0, 10)

        // Query audits but expect no results
        <%_ if (!reactive) { _%>
        restAuditMockMvc.perform(get("/management/audits?fromDate=$fromDate&toDate=$toDate"))
            .andExpect(status().isOk)
            .andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))
            .andExpect(header().string("X-Total-Count", "0"))
        <%_ } else { _%>
        webTestClient.get().uri("/management/audits?fromDate="+fromDate+"&toDate="+toDate)
            .exchange()
            .expectStatus().isOk()
            .expectHeader().contentType(MediaType.APPLICATION_JSON)
            .expectHeader().valueEquals("X-Total-Count", "0");
        <%_ } _%>
    }

    @Test
    <% if (!reactive) { %>@Throws(Exception::class)<% } %>
    fun getNonExistingAudit() {
        // Get the audit
        <%_ if (!reactive) { _%>
        restAuditMockMvc.perform(get("/management/audits/{id}", java.lang.Long.MAX_VALUE))
            .andExpect(status().isNotFound)
        <%_ } else { _%>
        webTestClient.get().uri("/management/audits/{id}", Long.MAX_VALUE)
            .exchange()
            .expectStatus().isNotFound()
        <%_ } _%>
    }

    @Test
    <%_ if (databaseType === 'sql') { _%>
    @Transactional
    <%_ } _%>
    <% if (!reactive) { %>@Throws(Exception::class)<% } %>
    fun testPersistentAuditEventEquals() {
        equalsVerifier(PersistentAuditEvent::class)
        val auditEvent1 = PersistentAuditEvent(id = <% if (databaseType === 'sql') { %>1L<% } else { %>"id1"<% } %>)
        val auditEvent2 = PersistentAuditEvent(id = auditEvent1.id)
        assertThat(auditEvent1).isEqualTo(auditEvent2)
        auditEvent2.id = <% if (databaseType === 'sql') { %>2L<% } else { %>"id2"<% } %>
        assertThat(auditEvent1).isNotEqualTo(auditEvent2)
        auditEvent1.id = null
        assertThat(auditEvent1).isNotEqualTo(auditEvent2)
    }
}
