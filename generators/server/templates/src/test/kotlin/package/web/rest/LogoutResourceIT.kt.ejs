<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.web.rest

import <%= packageName %>.<%= mainClass %>
<%_ if (cacheProvider === 'redis') { _%>
import <%= packageName %>.RedisTestContainerExtension
<%_ } _%>
import <%= packageName %>.config.TestSecurityConfiguration
import <%= packageName %>.security.USER
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
<%_ if (cacheProvider === 'redis') { _%>
import org.junit.jupiter.api.extension.ExtendWith
<%_ } _%>
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.boot.test.context.SpringBootTest
<%_ if (reactive) { _%>
import org.springframework.context.ApplicationContext
<%_ } _%>
import org.springframework.http.MediaType
import org.springframework.security.core.context.SecurityContextHolder
import org.springframework.security.oauth2.client.registration.<% if (reactive) { %>Reactive<% } %>ClientRegistrationRepository
import org.springframework.security.oauth2.core.oidc.OidcIdToken
<%_ if (!reactive) { _%>
import org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter
import org.springframework.test.web.servlet.MockMvc
import org.springframework.test.web.servlet.setup.MockMvcBuilders
import org.springframework.web.context.WebApplicationContext
<%_ } else { _%>
import org.springframework.test.web.reactive.server.WebTestClient
<%_ } _%>

import java.time.Instant

<%_ if (!reactive) { _%>
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post
import org.springframework.test.web.servlet.result.MockMvcResultMatchers.content
import org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath
import org.springframework.test.web.servlet.result.MockMvcResultMatchers.status
<%_ } else { _%>
import org.springframework.security.test.web.reactive.server.SecurityMockServerConfigurers.*
<%_ } _%>

/**
 * Integration tests for the [LogoutResource] REST controller.
 */
@SpringBootTest(classes = [<%= mainClass %>::class, TestSecurityConfiguration::class])
<%_ if (cacheProvider === 'redis') { _%>
@ExtendWith(RedisTestContainerExtension::class)
<%_ } _%>
class LogoutResourceIT {

    @Autowired
    private lateinit var registrations: <% if (reactive) { %>Reactive<% } %>ClientRegistrationRepository

    @Autowired
    private lateinit var context: <% if (!reactive) { %>Web<% } %>ApplicationContext

    <%_ if (!reactive) { _%>
    private lateinit var restLogoutMockMvc: MockMvc
    <%_ } else { _%>
    private lateinit var webTestClient: WebTestClient
    <%_ } _%>

    private lateinit var idToken: OidcIdToken

    @BeforeEach
    <% if (!reactive) { %>@Throws(Exception::class)<% } %>
    fun before() {
        val claims = mapOf(
            "groups" to "ROLE_USER",
            "sub" to 123
        )
        val idToken = OidcIdToken(ID_TOKEN, Instant.now(), Instant.now().plusSeconds(60), claims)
        <%_ if (!reactive) { _%>
        SecurityContextHolder.getContext().authentication = authenticationToken(idToken)
        val authInjector = SecurityContextHolderAwareRequestFilter()
        authInjector.afterPropertiesSet()

        restLogoutMockMvc = MockMvcBuilders.webAppContextSetup(this.context).build()
        <%_ } else { _%>
        val springSecurity = springSecurity()
        val webTestClient: WebTestClient.MockServerSpec<*> = WebTestClient
            .bindToApplicationContext(context!!)
            .apply(springSecurity!!)
        <%_ } _%>
    }

    @Test
    <% if (!reactive) { %>@Throws(Exception::class)<% } %>
    fun getLogoutInformation() {
    <%_ if (!reactive) { _%>
        val logoutUrl = this.registrations.findByRegistrationId("oidc").providerDetails
            .configurationMetadata["end_session_endpoint"].toString()
        restLogoutMockMvc.perform(post("/api/logout"))
            .andExpect(status().isOk)
            .andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))
            .andExpect(jsonPath("\$.logoutUrl").value(logoutUrl))
            .andExpect(jsonPath("\$.idToken").value(ID_TOKEN))
    <%_ } else { _%>
        val logoutUrl = this.registrations.findByRegistrationId("oidc")
            .map { it.providerDetails.configurationMetadata["end_session_endpoint"].toString() }
            .block()

        this.webTestClient.mutateWith(csrf())
            .mutateWith(mockAuthentication(TestUtil.authenticationToken(idToken)))
            .post().uri("/api/logout").exchange()
            .expectStatus().isOk()
            .expectHeader().contentType(MediaType.APPLICATION_JSON_VALUE)
            .expectBody()
            .jsonPath("$.logoutUrl").isEqualTo(logoutUrl.toString())
            .jsonPath("$.idToken").isEqualTo(ID_TOKEN)
    <%_ } _%>
    }
}

